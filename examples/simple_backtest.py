#!/usr/bin/env python3
"""
Simple backtest example for the Kraken trading bot

This script demonstrates how to use the TradingBot API to run a simple backtest
and visualize the results.
"""

import os
import sys
import matplotlib.pyplot as plt
from pathlib import Path

# Add parent directory to path so we can import from src
sys.path.insert(0, str(Path(__file__).parent.parent))

from src.trading_bot import TradingBot
from src.strategies.moving_average import MovingAverageCrossover
from src.utils.data_utils import plot_strategy

def run_simple_backtest():
    """Run a simple backtest and visualize results"""
    print("Starting simple backtest example...")
    
    # Initialize trading bot
    bot = TradingBot()
    
    # Define backtest parameters
    start_date = '2023-01-01'
    end_date = '2023-03-31'
    trading_pair = 'XXBTZUSD'  # Bitcoin/USD
    
    print(f"Running backtest for {trading_pair} from {start_date} to {end_date}")
    
    # Run backtest
    results = bot.backtest(
        start_date=start_date,
        end_date=end_date,
        interval=60,  # 1 hour candles
        plot=True
    )
    
    if results['status'] == 'success':
        metrics = results['metrics']
        print("\nBacktest Results:")
        print(f"Total trades: {metrics['total_trades']}")
        print(f"Win rate: {metrics['win_rate']:.2%}")
        print(f"Average win: {metrics['avg_win']:.2%}")
        print(f"Average loss: {metrics['avg_loss']:.2%}")
        print(f"Cumulative return: {metrics['cumulative_return']:.2%}")
        
        # The plot was already generated by the backtest function
        print("\nPlot saved in the data directory.")
    else:
        print(f"Backtest failed: {results.get('reason')}")

if __name__ == "__main__":
    run_simple_backtest()